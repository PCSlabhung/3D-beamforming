
#ifndef _POLAR_H_
#define _POLAR_H_
#include <iostream>
#include <fstream>
#include <math.h>
#include <ap_fixed.h>
#include <ap_axi_sdata.h>
#include <ap_int.h>
#include <hls_stream.h>
#include <iomanip>
using namespace std;

typedef ap_axis<64, 0, 0, 0> trans_pkt;

typedef ap_fixed<32,16>     data_t;
//typedef float              data_t;
typedef ap_ufixed<32,16>    u_data_t;
typedef ap_uint<11>         index_t;
typedef ap_fixed<18,2>      cos_sin_t;
typedef ap_fixed<16, 8>       bf_data_t_int;
//typedef ap_int<16> bf_data_t_int;
//typedef ap_fixed<24,17>      bf_data_t;
typedef ap_fixed<32, 16>    bf_data_t;
typedef ap_fixed<64, 32>    bf_data_t_64;
typedef ap_uint<64>         input_data_t;
// typedef float               data_t;
// typedef float               index_t;
// typedef float               cos_t;
// typedef float               sin_t;

const data_t PI                   = 3.14159265358979323846f;
const data_t PI_80                = 2.51327412287f;
const float TWO_PI                = 6.28318530717958647692f;
const int F0                      = 40000;   
const int channel_num             = 64;
const int no_lines_phi            = 33;
const int no_lines                = 33;
const int NR                      = 324;
const int N_ENABLED               = 64;
//////////////////////////////////////////////////
//////////////////////////////////////////////////
const int Data_dim                = 2000; //不確定
//////////////////////////////////////////////////
//////////////////////////////////////////////////
/*typedef struct out_struct{
    bf_data_t real;
    bf_data_t imag;
    out_struct(const bf_data_t& real, const bf_data_t& imag){this->real = real; this->imag = imag;}
    out_struct(){this->real = 0; this->imag = 0;}
}out_complex_t;*/
typedef struct out_struct{
    bf_data_t_64 out_abs;
    out_struct(const bf_data_t& out_abs){this->out_abs = out_abs;}
    out_struct(){this->out_abs = 0;}
}out_complex_t;

typedef struct in_struct{
    input_data_t in_data;
    in_struct(const input_data_t& data){this->in_data = data;}
    in_struct(){this->in_data = 0 ;}
}in_data_t;

void polar_approximation(hls::stream<cos_sin_t> cos_stream[channel_num], hls::stream<cos_sin_t> sin_stream[channel_num],hls::stream<index_t> index_stream[channel_num]);
//void polar_approximation(hls::stream<cos_sin_t> cos_stream[channel_num], hls::stream<cos_sin_t> sin_stream[channel_num],hls::stream<index_t> index_stream[channel_num], data_t bb_cos_data[Data_dim][channel_num], data_t bb_sin_data[Data_dim][channel_num], data_t local_bb_cos_data[Data_dim][channel_num], data_t local_bb_sin_data[Data_dim][channel_num]);
cos_sin_t approx_cos(data_t theta);
cos_sin_t approx_sin(data_t theta);
// void top_model(trans_pkt bb_data[Data_dim][channel_num / 2], trans_pkt out_data[no_lines_phi][no_lines][NR]);
void top_model(hls::stream<trans_pkt> &bb_data, hls::stream<trans_pkt> &out_data);
void beamformer(bf_data_t_int bb_cos_data[Data_dim][channel_num], bf_data_t_int bb_sin_data[Data_dim][channel_num], hls::stream<cos_sin_t> cos_stream[channel_num], hls::stream<cos_sin_t> sin_stream[channel_num], hls::stream<index_t> index_stream[channel_num], hls::stream<trans_pkt> &out_data);

bf_data_t sub_pipeline(bf_data_t to_sum_element[channel_num]);
bf_data_t sum_pipeline(bf_data_t to_sum_element[channel_num]);
bf_data_t MAC_pipeline(bf_data_t to_sum_element[channel_num], bf_data_t to_mul_element[channel_num]);
void top_dataflow(bf_data_t_int local_bb_cos_data[Data_dim][channel_num], bf_data_t_int local_bb_sin_data[Data_dim][channel_num],  hls::stream<trans_pkt> &out_data);
void copy_mem(trans_pkt axi_element[Data_dim][channel_num / 2], bf_data_t_int local_sin_cache[Data_dim][channel_num], bf_data_t_int local_cos_cache[Data_dim][channel_num]);
void copy_mem_v1(hls::stream<trans_pkt> &axi_element, bf_data_t_int local_sin_cache[Data_dim][channel_num], bf_data_t_int local_cos_cache[Data_dim][channel_num]);
/*const float chx[N_ENABLED] = {
    0.00816209713900000, 0.00942477796100000, 8.01000000000000e-18, -0.0188495559200000,
    -0.0408104857000000, -0.0565486677600000, -0.0571346799700000, -0.0376991118400000,
    0.00243931203200000, -0.00487862406400000, -0.0199929732200000, -0.0364145457600000,
    -0.0455181822000000, -0.0399859464400000, -0.0170751842200000, 0.0195144962600000,
    -0.00471238898000000, -0.0163241942800000, -0.0282743338800000, -0.0326483885600000,
    -0.0235619449000000, -1.04000000000000e-17, 0.0329867228600000, 0.0652967771100000,
    -0.00910363643900000, -0.0182072728800000, -0.0199929732200000, -0.00975724812800000,
    0.0121965601600000, 0.0399859464400000, 0.0637254550800000, 0.0728290915100000,
    -0.00816209713900000, -0.00942477796100000, -5.19000000000000e-18, 0.0188495559200000,
    0.0408104857000000, 0.0565486677600000, 0.0571346799700000, 0.0376991118400000,
    -0.00243931203200000, 0.00487862406400000, 0.0199929732200000, 0.0364145457600000,
    0.0455181822000000, 0.0399859464400000, 0.0170751842200000, -0.0195144962600000,
    0.00471238898000000, 0.0163241942800000, 0.0282743338800000, 0.0326483885600000,
    0.0235619449000000, 1.73000000000000e-17, -0.0329867228600000, -0.0652967771100000,
    0.00910363643900000, 0.0182072728800000, 0.0199929732200000, 0.00975724812800000,
    -0.0121965601600000, -0.0399859464400000, -0.0637254550800000, -0.0728290915100000
};*/
const float chx[N_ENABLED] = {
0.018, -0.01327263981 ,0.001573663045, 0.0109518995 ,-0.0162389114,
0.01524242831, -0.005065507172, -0.009614359239, 0.02078248368, -0.02155740011,
0.01036731874, 0.007646029172, -0.02300677993, 0.02695109766,
-0.01642756692,
-0.003791065349,
0.02325137324,
-0.03126275555,
0.02278665392,
-0.001523486393,
-0.02165372389,
0.034282891,
-0.02903314988,
0.0079298561,
0.01833354476,
-0.03582626808,
0.0347880306,
-0.01506596881,
-0.01344183212,
0.03575681891,
-0.03970597587,
0.02256337191,
0.007175816249,
-0.03399938204,
0.04348211766,
-0.03004926108,
0.000218841336,
0.03054561519,
-0.04586032183,
0.03715439638,
-0.008452149129,
-0.02545613077,
0.04664125081,
-0.04352364575,
0.01719764826,
0.01885955429,
-0.0456892492,
0.04882751047,
-0.02610275408,
-0.01094883288,
0.04293746017,
-0.05277361647,
0.03480074492,
0.001975039043,
-0.03839079248,
0.05511744546,
-0.0429237404,
0.007761069328,
0.03212650743,
-0.05567174317,
0.05011608468,
-0.01791942394,
-0.02429231868,
0.05431415688
};

/*const float chy[N_ENABLED] = {
    0.00471238898000000, 0.0163241942800000, 0.0282743338800000, 0.0326483885600000,
    0.0235619449000000, 3.20000000000000e-17, -0.0329867228600000, -0.0652967771100000,
    0.00910363643900000, 0.0182072728800000, 0.0199929732200000, 0.00975724812800000,
    -0.0121965601600000, -0.0399859464400000, -0.0637254550800000, -0.0728290915100000,
    0.00816209713900000, 0.00942477796100000, 3.46000000000000e-18, -0.0188495559200000,
    -0.0408104857000000, -0.0565486677600000, -0.0571346799700000, -0.0376991118400000,
    0.00243931203200000, -0.00487862406400000, -0.0199929732200000, -0.0364145457600000,
    -0.0455181822000000, -0.0399859464400000, -0.0170751842200000, 0.0195144962600000,
    -0.00471238898000000, -0.0163241942800000, -0.0282743338800000, -0.0326483885600000,
    -0.0235619449000000, -1.39000000000000e-17, 0.0329867228600000, 0.0652967771100000,
    -0.00910363643900000, -0.0182072728800000, -0.0199929732200000, -0.00975724812800000,
    0.0121965601600000, 0.0399859464400000, 0.0637254550800000, 0.0728290915100000,
    -0.00816209713900000, -0.00942477796100000, -6.93000000000000e-18, 0.0188495559200000,
    0.0408104857000000, 0.0565486677600000, 0.0571346799700000, 0.0376991118400000,
    -0.00243931203200000, 0.00487862406400000, 0.0199929732200000, 0.0364145457600000,
    0.0455181822000000, 0.0399859464400000, 0.0170751842200000, -0.0195144962600000
};*/
const float chy[N_ENABLED] = {
0,
-0.0121588253,
0.01793107874,
-0.01428481352,
0.002872434776,
0.009695985214,
-0.01884343419,
0.01851186367,
-0.007589729708,
-0.008898581386,
0.02215435797,
-0.02437674584,
0.01333289924,
0.005925123216,
-0.02336652349,
0.02925538965,
-0.01959628198,
-0.001292813093,
0.02267576412,
-0.03294679786,
0.02594839815,
-0.004612714495,
-0.02020050948,
0.03524900541,
-0.03199448017,
0.01142955667,
0.0160729525,
-0.03599936227,
0.03737171757,
-0.01879278189,
-0.01046636781,
0.03509122751,
-0.0417540212,
0.02633103247,
0.003602404567,
-0.03248237073,
0.04485983987,
-0.03367208254,
0.004250324319,
0.0281988622,
-0.04646048644,
0.04045233808,
-0.01278243316,
-0.02233561641,
0.04638770332,
-0.04632802566,
0.02165298784,
0.01505404334,
-0.04453972221,
0.05098680524,
-0.03050076046,
-0.006577074184,
0.04088534307,
-0.05415896021,
0.03895678924,
-0.002818192041,
-0.03546573185,
0.05562752963,
-0.04665762955,
0.01280993801,
0.02839377011,
-0.05523688075,
0.05325873288,
-0.02304283754,
};

const data_t chy_mm[N_ENABLED] = {4.71239 , 16.3242 , 28.2743 , 32.6484 , 23.5619 , 3.2e-14 , -32.9867 , -65.2968 , 9.10364 , 18.2073 , 19.993 , 9.75725 , -12.1966 , -39.9859 , -63.7255 , -72.8291 , 8.1621 , 9.42478 , 3.46e-15 , -18.8496 , -40.8105 , -56.5487 , -57.1347 , -37.6991 , 2.43931 , -4.87862 , -19.993 , -36.4145 , -45.5182 , -39.9859 , -17.0752 , 19.5145 , -4.71239 , -16.3242 , -28.2743 , -32.6484 , -23.5619 , -1.39e-14 , 32.9867 , 65.2968 , -9.10364 , -18.2073 , -19.993 , -9.75725 , 12.1966 , 39.9859 , 63.7255 , 72.8291 , -8.1621 , -9.42478 , -6.93e-15 , 18.8496 , 40.8105 , 56.5487 , 57.1347 , 37.6991 , -2.43931 , 4.87862 , 19.993 , 36.4145 , 45.5182 , 39.9859 , 17.0752 , -19.5145 };

const data_t chx_mm[N_ENABLED] = {8.1621 , 9.42478 , 8.01e-15 , -18.8496 , -40.8105 , -56.5487 , -57.1347 , -37.6991 , 2.43931 , -4.87862 , -19.993 , -36.4145 , -45.5182 , -39.9859 , -17.0752 , 19.5145 , -4.71239 , -16.3242 , -28.2743 , -32.6484 , -23.5619 , -1.04e-14 , 32.9867 , 65.2968 , -9.10364 , -18.2073 , -19.993 , -9.75725 , 12.1966 , 39.9859 , 63.7255 , 72.8291 , -8.1621 , -9.42478 , -5.19e-15 , 18.8496 , 40.8105 , 56.5487 , 57.1347 , 37.6991 , -2.43931 , 4.87862 , 19.993 , 36.4145 , 45.5182 , 39.9859 , 17.0752 , -19.5145 , 4.71239 , 16.3242 , 28.2743 , 32.6484 , 23.5619 , 1.73e-14 , -32.9867 , -65.2968 , 9.10364 , 18.2073 , 19.993 , 9.75725 , -12.1966 , -39.9859 , -63.7255 , -72.8291 };

const data_t range_mm[NR] = {
    200.000, 204.250, 208.500, 212.750, 217.000, 221.250, 225.500, 229.750, 234.000, 238.250, 242.500, 246.750, 251.000, 255.250, 259.500, 263.750, 268.000, 272.250, 276.500, 280.750, 285.000, 289.250, 293.500, 297.750, 302.000, 306.250, 310.500, 314.750, 319.000, 323.250, 327.500, 331.750, 336.000, 340.250, 344.500, 348.750, 353.000, 357.250, 361.500, 365.750, 370.000, 374.250, 378.500, 382.750, 387.000, 391.250, 395.500, 399.750, 404.000, 408.250, 412.500, 416.750, 421.000, 425.250, 429.500, 433.750, 438.000, 442.250, 446.500, 450.750, 455.000, 459.250, 463.500, 467.750, 472.000, 476.250, 480.500, 484.750, 489.000, 493.250, 497.500, 501.750, 506.000, 510.250, 514.500, 518.750, 523.000, 527.250, 531.500, 535.750, 540.000, 544.250, 548.500, 552.750, 557.000, 561.250, 565.500, 569.750, 574.000, 578.250, 582.500, 586.750, 591.000, 595.250, 599.500, 603.750, 608.000, 612.250, 616.500, 620.750, 625.000, 629.250, 633.500, 637.750, 642.000, 646.250, 650.500, 654.750, 659.000, 663.250, 667.500, 671.750, 676.000, 680.250, 684.500, 688.750, 693.000, 697.250, 701.500, 705.750, 710.000, 714.250, 718.500, 722.750, 727.000, 731.250, 735.500, 739.750, 744.000, 748.250, 752.500, 756.750, 761.000, 765.250, 769.500, 773.750, 778.000, 782.250, 786.500, 790.750, 795.000, 799.250, 803.500, 807.750, 812.000, 816.250, 820.500, 824.750, 829.000, 833.250, 837.500, 841.750, 846.000, 850.250, 854.500, 858.750, 863.000, 867.250, 871.500, 875.750, 880.000, 884.250, 888.500, 892.750, 897.000, 901.250, 905.500, 909.750, 914.000, 918.250, 922.500, 926.750, 931.000, 935.250, 939.500, 943.750, 948.000, 952.250, 956.500, 960.750, 965.000, 969.250, 973.500, 977.750, 982.000, 986.250, 990.500, 994.750, 999.000, 1003.250, 1007.500, 1011.750, 1016.000, 1020.250, 1024.500, 1028.750, 1033.000, 1037.250, 1041.500, 1045.750, 1050.000, 1054.250, 1058.500, 1062.750, 1067.000, 1071.250, 1075.500, 1079.750, 1084.000, 1088.250, 1092.500, 1096.750, 1101.000, 1105.250, 1109.500, 1113.750, 1118.000, 1122.250, 1126.500, 1130.750, 1135.000, 1139.250, 1143.500, 1147.750, 1152.000, 1156.250, 1160.500, 1164.750, 1169.000, 1173.250, 1177.500, 1181.750, 1186.000, 1190.250, 1194.500, 1198.750, 1203.000, 1207.250, 1211.500, 1215.750, 1220.000, 1224.250, 1228.500, 1232.750, 1237.000, 1241.250, 1245.500, 1249.750, 1254.000, 1258.250, 1262.500, 1266.750, 1271.000, 1275.250, 1279.500, 1283.750, 1288.000, 1292.250, 1296.500, 1300.750, 1305.000, 1309.250, 1313.500, 1317.750, 1322.000, 1326.250, 1330.500, 1334.750, 1339.000, 1343.250, 1347.500, 1351.750, 1356.000, 1360.250, 1364.500, 1368.750, 1373.000, 1377.250, 1381.500, 1385.750, 1390.000, 1394.250, 1398.500, 1402.750, 1407.000, 1411.250, 1415.500, 1419.750, 1424.000, 1428.250, 1432.500, 1436.750, 1441.000, 1445.250, 1449.500, 1453.750, 1458.000, 1462.250, 1466.500, 1470.750, 1475.000, 1479.250, 1483.500, 1487.750, 1492.000, 1496.250
};

const data_t range_mm_rec[NR]{
    0.034, 0.0332925, 0.0326139, 0.0319624, 0.0313364, 0.0307345, 0.0301552, 0.0295974, 0.0290598, 0.0285414, 0.0280412, 0.0275583, 0.0270916, 0.0266405, 0.0262042, 0.025782, 0.0253731, 0.024977, 0.0245931, 0.0242208, 0.0238596, 0.0235091, 0.0231687, 0.022838, 0.0225166, 0.0222041, 0.0219002, 0.0216044, 0.0213166, 0.0210363, 0.0207634, 0.0204974, 0.0202381, 0.0199853, 0.0197388, 0.0194982, 0.0192635, 0.0190343, 0.0188105, 0.0185919, 0.0183784, 0.0181697, 0.0179657, 0.0177662, 0.0175711, 0.0173802, 0.0171934, 0.0170106, 0.0168317, 0.0166565, 0.0164848, 0.0163167, 0.016152, 0.0159906, 0.0158324, 0.0156772, 0.0155251, 0.0153759, 0.0152296, 0.015086, 0.0149451, 0.0148068, 0.014671, 0.0145377, 0.0144068, 0.0142782, 0.0141519, 0.0140278, 0.0139059, 0.0137861, 0.0136683, 0.0135526, 0.0134387, 0.0133268, 0.0132167, 0.0131084, 0.0130019, 0.0128971, 0.012794, 0.0126925, 0.0125926, 0.0124943, 0.0123974, 0.0123021, 0.0122083, 0.0121158, 0.0120248, 0.0119351, 0.0118467, 0.0117596, 0.0116738, 0.0115893, 0.0115059, 0.0114238, 0.0113428, 0.0112629, 0.0111842, 0.0111066, 0.01103, 0.0109545, 0.01088, 0.0108065, 0.010734, 0.0106625, 0.0105919, 0.0105222, 0.0104535, 0.0103856, 0.0103187, 0.0102525, 0.0101873, 0.0101228, 0.0100592, 0.00999632, 0.00993426, 0.00987296, 0.00981241, 0.0097526, 0.00969351, 0.00963514, 0.00957747, 0.00952048, 0.00946416, 0.00940851, 0.00935351, 0.00929915, 0.00924541, 0.0091923, 0.00913979, 0.00908787, 0.00903654, 0.0089858, 0.00893561, 0.00888599, 0.00883691, 0.00878837, 0.00874036, 0.00869287, 0.0086459, 0.00859943, 0.00855346, 0.00850798, 0.00846297, 0.00841845, 0.00837438, 0.00833078, 0.00828763, 0.00824492, 0.00820265, 0.00816082, 0.0081194, 0.00807841, 0.00803783, 0.00799765, 0.00795787, 0.00791849, 0.00787949, 0.00784088, 0.00780264, 0.00776477, 0.00772727, 0.00769013, 0.00765335, 0.00761691, 0.00758083, 0.00754508, 0.00750966, 0.00747458, 0.00743983, 0.00740539, 0.00737127, 0.00733747, 0.00730397, 0.00727078, 0.00723789, 0.0072053, 0.007173, 0.00714098, 0.00710925, 0.0070778, 0.00704663, 0.00701573, 0.00698511, 0.00695474, 0.00692464, 0.0068948, 0.00686522, 0.00683589, 0.00680681, 0.00677797, 0.00674938, 0.00672103, 0.00669291, 0.00666503, 0.00663738, 0.00660996, 0.00658277, 0.0065558, 0.00652904, 0.00650251, 0.00647619, 0.00645008, 0.00642419, 0.00639849, 0.00637301, 0.00634772, 0.00632264, 0.00629775, 0.00627306, 0.00624856, 0.00622426, 0.00620014, 0.0061762, 0.00615245, 0.00612889, 0.0061055, 0.00608229, 0.00605926, 0.0060364, 0.00601371, 0.00599119, 0.00596884, 0.00594666, 0.00592464, 0.00590278, 0.00588108, 0.00585954, 0.00583816, 0.00581694, 0.00579587, 0.00577495, 0.00575418, 0.00573356, 0.00571309, 0.00569276, 0.00567258, 0.00565254, 0.00563264, 0.00561288, 0.00559326, 0.00557377, 0.00555442, 0.00553521, 0.00551612, 0.00549717, 0.00547835, 0.00545966, 0.00544109, 0.00542265, 0.00540433, 0.00538614, 0.00536807, 0.00535012, 0.00533229, 0.00531458, 0.00529698, 0.0052795, 0.00526214, 0.00524489, 0.00522775, 0.00521073, 0.00519381, 0.00517701, 0.00516031, 0.00514372, 0.00512724, 0.00511086, 0.00509459, 0.00507842, 0.00506235, 0.00504638, 0.00503052, 0.00501475, 0.00499908, 0.00498351, 0.00496804, 0.00495266, 0.00493738, 0.00492219, 0.00490709, 0.00489209, 0.00487717, 0.00486235, 0.00484762, 0.00483298, 0.00481842, 0.00480396, 0.00478958, 0.00477528, 0.00476107, 0.00474695, 0.0047329, 0.00471895, 0.00470507, 0.00469127, 0.00467756, 0.00466392, 0.00465037, 0.00463689, 0.00462349, 0.00461017, 0.00459692, 0.00458375, 0.00457066, 0.00455764, 0.0045447
};

#endif